type Nft @entity {
  # {contractAddress}-{tokenId}
  id: ID!
  contract: NftContractData!
  sales: [Sale!]! @derivedFrom(field: "nft")
  tokenId: BigInt!
}

type NftContractDailyData @entity {
  # {contractAddress}-{dailyIntervalTimestamp}
  id: ID!
  contract: NftContractData!
  timestamp: BigInt!
  volumeAVAX: BigInt!
  tradeVolumes: [DailyTradeVolume!]! @derivedFrom(field: "nftContractDailyData")
}

type NftContractData @entity {
  # {contractAddress}
  id: ID!
  volumeAVAX: BigInt!
  dailyDatas: [NftContractDailyData!]! @derivedFrom(field: "contract")
  nfts: [Nft!]! @derivedFrom(field: "contract")
  tradeVolumes: [TradeVolume!]! @derivedFrom(field: "nftContractData")
}

type DailyTradeVolume @entity {
  # {nftContractDailyData}-{currency}
  id: ID!
  currency: Bytes!
  nftContractDailyData: NftContractDailyData!
  volume: BigInt!
}

type TradeVolume @entity {
  # {nftContractData}-{currency}
  id: ID!
  currency: Bytes!
  nftContractData: NftContractData!
  volume: BigInt!
}

type Sale @entity {
  # {transactionHash}
  id: ID!
  amount: BigInt!
  currency: Bytes!
  isTakerAsk: Boolean!
  maker: Bytes!
  contract: NftContractData!
  nft: Nft!
  orderHash: Bytes!
  orderNonce: BigInt!
  price: BigInt!
  strategy: Bytes!
  taker: Bytes!
  timestamp: BigInt!
  transactionHash: Bytes!
}

type CancelledMultipleOrder @entity {
  # {transactionHash}
  id: ID!
  orderNonces: [BigInt!]!
  timestamp: BigInt!
  transactionHash: Bytes!
  user: Bytes!
}

type CancelledAllOrder @entity {
  # {transactionHash}
  id: ID!
  newMinNonce: BigInt!
  timestamp: BigInt!
  transactionHash: Bytes!
  user: Bytes!
}
